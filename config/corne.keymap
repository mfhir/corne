/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        htaltgui: htaltgui {
            compatible = "zmk,behavior-hold-tap";
            label = "HTALTGUI";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        game {
            bindings = <&to 4>;
            key-positions = <38 39>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <11 23>;
            layers = <0>;
        };

        jakup {
            bindings = <&jakup>;
            key-positions = <0 12 24>;
        };

        gameenter {
            bindings = <&kp ENTER>;
            key-positions = <3 4 5>;
            layers = <4>;
        };

        base_layer {
            bindings = <&to 0>;
            key-positions = <37 40>;
        };

        gamey {
            bindings = <&kp Y>;
            key-positions = <5 17>;
            layers = <4>;
        };

        game1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <1 38 2>;
            layers = <4>;
        };

        game3 {
            bindings = <&kp NUMBER_3>;
            key-positions = <38 3 2>;
            layers = <4>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <36 41>;
        };
    };

    macros {
        jakup: jakup {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LEFT_CONTROL &kp LEFT_SHIFT &kp ESC>,
                <&macro_release &kp LEFT_CONTROL &kp LEFT_SHIFT &kp ESC>;

            label = "JAKUP";
            wait-ms = <10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E                        &kp R    &kp T    &kp Y  &kp U      &kp I      &kp O    &kp P     &kp BSPC
&kp LEFT_SHIFT    &kp A  &kp S  &kp D                        &kp F    &kp G    &kp H  &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C                        &kp V    &kp B    &kp N  &kp M      &kp COMMA  &kp DOT  &kp FSLH  &sl 3
                                &htaltgui LEFT_ALT LEFT_GUI  &kp RET  &mo 1    &mo 2  &kp SPACE  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Lower";
            bindings = <
&kp GRAVE        &kp N1           &kp N2            &kp N3                &kp N4          &kp N5         &kp N6          &kp N7           &kp N8                 &kp N9                &kp N0     &kp TILDE
&kp KP_ASTERISK  &kp PLUS         &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE  &kp EQUAL      &kp UNDERSCORE  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET     &kp MINUS  &kp KP_DIVIDE
&trans           &kp EXCLAMATION  &kp AT_SIGN       &kp HASH              &kp DOLLAR      &kp PERCENT    &kp LCTRL       &kp AMPERSAND    &kp ASTERISK           &kp NON_US_BACKSLASH  &kp PIPE   &trans
                                                    &trans                &trans          &trans         &trans          &trans           &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Raise";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans     &trans  &trans
                        &trans  &trans  &trans    &trans    &trans    &trans
            >;
        };

        func {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4        &kp F5     &kp F6   &kp F7  &kp F8  &kp F9  &kp F10  &bt BT_CLR_ALL
&trans  &trans  &trans  &trans  &kp CAPSLOCK  &kp F11    &kp F12  &trans  &trans  &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans        &trans     &trans   &trans  &trans  &trans  &trans   &trans
                        &trans  &trans        &trans     &trans   &trans  &trans
            >;
        };

        game_layer {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E     &kp R      &kp T     &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB    &kp A  &kp S  &kp D     &kp F      &kp G     &trans  &trans  &trans  &trans  &trans  &trans
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V      &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                         &kp LALT  &kp SPACE  &trans    &trans  &trans  &trans
            >;
        };
    };
};
